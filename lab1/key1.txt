Ryan Lin
005131227
HW 1
==========
1.1
1. e m a c s SP e x e r 1 . h t m l 
2. C-s H T M L Enter
3. C-s s c a v e n t e r Enter M-b
4. C-s s e l f - r e f e r e n t i a l Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
8/9. N/A, used emacs shortcuts for earlier exercises
10. C-x C-c

1.2
1. e m a c s SP e x e r 2 . h t m l
2. M-g M-g 1 9 Enter C-k
3. C-s D E L E T E - M E Enter C-a C-k
4. M-< C-s h t t p s : / / e n . w i k i C-s Enter C-a C-k C-k C-k UP C-k
5. M-< C-s < ! - - Enter Backspace Backspace Backspace Backspace C-d C-d C-d DOWN C-a
C-u 4 C-k C-s < ! - Enter C-a C-k

1.3
1. e m a c s SP e x e r 3 . h t m l
2. C-s A s s i g n m e n t SP 1 Enter Backspace 4 2 C-s C-s Enter Backspace 4 2
3. M-< C-s U T F - 8 Enter Backspace Backspace Backspace Backspace Backspace U S - A S C I I
4. M-< M-x flu Enter ^ [ : a s c i i : ] Enter
5. M-< C-s < / o l > Enter Enter
6. C-x C-s C-x C-c

1.4
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
2. e m a c s SP e x e r 4 . h t m l
3. M-> C-r - < Enter LEFT C-SP C-e C-w M-g M-g 4 2 8 Enter C-y
4. M-> C-r - < C-r C-r Enter Right C-SP Down Down Down C-e C-w M-g M-g 4 1 8 Enter C-y
M-> C-r - < Enter C-SP Down Down Down C-e C-w C-g C-g 3 7 4 C-y
M-> C-r - < Enter C-SP C-e C-w C-g C-g 1 3 0 C-y
M-> C-r - < Enter C-SP C-e C-w C-g C-g 1 9 C-y
5. M-g M-g 4 3 8 C-SP M-> C-w
6. C-x u
7. M-g M-g 4 3 8 C-a C-SP M-< M-;
8. M-< M-% < o l > Enter < o L > Enter SP SP SP SP SP SP SP 
(found 7 instances)
9. C-x C-c d i f f - u e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f

1.5
1. e m a c s Enter C-x d ~ Enter + junk Enter e
2. C-x C-f h e l l o . c Enter e
3. M-x c o m p i l e Enter h e l l o Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5. C-sp M-> M-w C-x C-f k e y 1 . t x t Enter M-> C-y
EOF on input

1.6
1. C-x b * s c r a t c h *
2. ( r a n d o m SP " 0 0 5 - 1 3 1 - 2 2 7 " ) C-j
   Output: -2228967575818546210
3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) )
4. ( * x y ) C-j
x and y were both instantiated to be positive numbers but (* x y) gave a 
negative number. This makes no mathematical sense.
5. M-: ( * x y ) Enter
Using M-: outputs the same thing, but with two more representations (octal and hex)
6. According to the emacs lisp manual, random numbers are actually pseudorandom numbers, 
which are generated from a given seed value. This results from the inability of a deterministic 
computer to generate true random numbers.
7. A mathematical error occurs in the above multiplication when an overflow occurs. Let x and y 
be two pseudorandom numbers between -2^(n-1) and 2^(n+1)-1, where n is the number of bits. 
Overflow occurs when x*y>int-max or when x*y<int-min. To obtain the probability of these two conditions 
being satisfied, it will help to use a graph model. Each point on the coordinate plane represents a possible combination 
of two pseudorandom numbers. We then graph the curves x*y=int-max and x*y=int-min and integrate the regions between 
these curves and the box defined as x=+/-2^(n-1) and y=+/-2^(n-1), which defines the max range of the generated
pseudorandom numbers. We then divide the result of the integration with the total possible combinations of random numbers,
expressed by (2^n)^2. Concretely, the probability of x*y to be incorrect is 4 * (integral from 1 to int-max of 
((int-max/x)dx)) / (2^n)^2.

Here is some pseudocode that calculates the probability of a mathematical error in the multiplication calculation.

count = 0
int_max = 2^(n-1)-1
int_min = -2^(n-1)

for every integer x between int_max and int_min
	for every integer y between int_max and int_min
		if x*y is greater than int_max or less than int_min
			increment count
return count/(2^2n)
		